                             Systems Software

                      Yacc & lex - Tutorial 21/10/96

1. Write down the grammar for the following Yacc grammar file. The grammar
is ambiguous. Why? Think of an example that shows the ambiguity.

/***********   expr.y yacc file for expression grammar ******/
%token NUMBER
%%
line : /* empty */ { printf("\nempty line\n"); }
     | expr '=' { printf("Answer = %d\n", $1); }
     ;
expr : expr '+' expr   { $$ = $1 + $3; }
     | expr '-' expr   { $$ = $1 - $3; }
     | expr '*' expr   { $$ = $1 * $3; }
     | expr '/' expr   { $$ = $1 / $3; }
     | NUMBER          { $$ = $1; }
     ;
%%

2. Paste the above yacc file as expr.y

3. Paste the following lex file as expr.l

%{
/***********   expr.l  lex file for expression grammar ******/
#include "y.tab.h"
extern int yylval;
%}
%%
[ \t]           ECHO ;
"="             { ECHO; return( '=' ); }
[0-9]           { ECHO; yylval = atoi(yytext); return NUMBER; }
"+"             { ECHO; return( '+' ); }
"-"             { ECHO; return( '-' ); }
"*"             { ECHO; return( '*' ); }
"/"             { ECHO; return( '/' ); }
\n              { return 0; /* end of input */ }
%%

4. Yacc the expr.y file with the -d switch which produces the header file
y.tab.h

i.e yacc -d expr.y

How many shift-reduce errors? What are they?

Lex expr.l and compile the files by:

     lex expr.l
     cc y.yab.c lex.yy.c -ly -ll

Run the file and try the following two expressions:

      9-4-2=
      9-4+2=

Draw a parse tree of these expressions and comment on the result.

5. Add the following two lines to the top of expr.y:

    %left '+' '-'      Evaluate +, - left to right
    %left '*' '/'       but give *, / greater precedence than +, -

Try yaccing the file again. Look and see what the file y.tab.h contains.
Lex and compile the program again, then run it a few times trying out
different expressions including the two above.

6. Alter expr.l so that numbers bigger than 9 can be used in the
expressions.

7. Add some sort of printout to the rules in expr.y so you can trace the
way yacc parses the expression.

eg. expr : expr '+' expr   { $$ = $1 + $3; printf(" sum "); }

Try a few expressions in your program. For each one draw a parse tree and
compare this with the printout. Can you determine the order yacc evaluates
each subtree?

8. The addition of one new rule will allow for brackets (and (nested
brackets)) in the grammar. Add this rule to your expression grammar above.
Alter expr.y and expr.l to allow them to evaluate expressions with
brackets. Try the expression:

3 * (4 - (5 + 7) / (15 - 9)) =
