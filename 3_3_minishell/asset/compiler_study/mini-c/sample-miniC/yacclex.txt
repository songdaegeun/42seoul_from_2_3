Compilers Lecture# 12

                                YACC and LEX

Example from last weeks lecture:

Grammar:

     E -> E + T | T
     T -> T * F | F
     F -> ( E ) | digit

YACC specification (Similar to Fig 5.10 Louden):

                   --------------------------------------

%{

#include <stdio.h>
#include <ctype.h>
%}

%token DIGIT

%%

line   : expr '\n'       {printf("%d\n", $1);}
       ;

expr   : expr '+' term   { $$ = $1 + $3; }
       | term
       ;

term   : term '*' factor { $$ = $1 * $3; }
       | factor
       ;

factor : '(' expr ')'    { $$ = $2; }
       | DIGIT
       ;

%%

yylex() {
    int c;
    c = getchar();
    if( isdigit( c ) ) {
        yylval = c - '0';
        return DIGIT;
    }
    return c;
}

               ---------------------------------------------

                           Notes on yacc and lex:

   * yylex( ) returns the next token as an integer code.
   * Lex can be used to generate the function yylex( )
   * Tokens are declared in the yacc file as the DIGIT token is above.
   * If yacced with the -d switch yacc will produce the header file y.tab.h
     containg the definitions
   * This contains the definition for each token and can be included in the
     lex file.
   * Single character tokens do not require defining and yylex( ) can
     simply return the character value.
   * If a token also has a value associated with it lex should place that
     value in the global variable yylval
   * If yylex( ) returns the null value 0, yacc assumes the end of input.

Terminals and corresponding values returned by lex for above grammar are:

  Token    Returned    yylval value
             value

 \n       0 (end of
          input)

 '+'      '+'

 '*'      '*'

 '('      '('

 ')'      ')'

 DIGIT    DIGIT       value of the
                      matched digit

Corresponding lex program:

               ---------------------------------------------

%{
#include "y.tab.h"
extern int yylval;
%}

%%
[ \t]           ECHO ;
"="             { ECHO; return( '=' ); }
[0-9]           { ECHO; yylval = atoi(yytext); return DIGIT; }
"+"             { ECHO; return( '+' ); }
"*"             { ECHO; return( '*' ); }
\n              { return 0; /* end of input */ }
%%

               ---------------------------------------------

                        Command sequence using lex:

If lex file is called lexsrc.l
and yacc file is called yaccsrc.y
and yaccsrc.y contains some token definitions to be returned by lex

yacc  -d  yaccsrc.y      (-d flag creates the header file y.tab.h)
lex   lexsrc.l
cc  y.tab.c  lex.yy.c  -ly  -ll     (leave   -ly   off if main and yyerror
functions are defined in yaccsrc.y)
                                             (leave   -ll   off if yywrap
function is defined in lexsrc.l)
a.out      or     a.out < file

---------------------------------------------------------------------------

                             Ambigous Grammars

eg.

expr  -->  expr  +  expr  |  expr * expr  |  ( expr )  |  NUMBER

eg. the string '2+3*4' has two distinct derivations:

Precedence and associativity using the   %left   operator. eg:

%left   '+'   '-'
%left   '*'   '/'

This specifies:

   * the operators + and - have the same precedence and are left
     associative
   * and then the operators * and / have the same precedence and are left
     associative
   * operators * and / have a higher precedence than + and - because they
     are listed in the second declaration.

The yacc source file for the above grammar is provided in Fig 5.14 of
Louden.
