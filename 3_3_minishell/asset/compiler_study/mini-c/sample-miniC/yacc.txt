Compilers Lecture# 11

                         THE YACC PARSER GENERATOR

There are several varieties of LR (input from the left with rightmost
derivation) parsers (LR(0), LR(1), SLR - Simple LR and LALR - LookaHead
LR), with differences depending on the amount of lookahead and on the
construction of the parse table. Their characteristics and use are outside
the scope of this unit :-).

It is possible, however, to automatically generate LALR parsers (which are
considered very powerful) using the YACC parser generator provided on UNIX.

YACC operates in an analogous manner to lex, in that a yacc source file (of
similar format) is compiled into C code which implements the parser.
---------------------------------------------------------------------------

                    YACC - YET ANOTHER COMPILER-COMPILER

Yacc file    --> Yacc Compiler --> y.tab.c
(yaccsrc.y)

y.tab.c      -->  C Compiler   --> a.out

input stream -->     a.out     --> output

Command sequence:

     yacc yaccsrc.y
     cc y.tab.c -ly
     a.out stream     or    a.out < file

Yacc source program format is very similar to that of lex:

declarations

%%

translation rules

%%

supporting C-functions
---------------------------------------------------------------------------

                           YACC TRANSLATION RULES

The production rule:

S -> A | B | C

is written in Yacc as:

S : A  { action 1 }
  | B  { action 2 }
  | C  { action 3 }
  ;

Actions can refer to symbols within the rule:

     $$ represents left side symbol of the rule.
     $1, $2, $3,… refer to the corresponding symbols on the right side of
     the rule.

---------------------------------------------------------------------------

                            SIMPLE YACC EXAMPLE

Consider the grammar from exercise 5.1 of Louden:

     E -> ( L ) | a
     L -> L, E | E

Yacc Code:

                   --------------------------------------

%{
#include <stdio.h>
%}

%start  S

%%

S : E        { printf("Parse completed successfully\n"); return 0;  }
  ;

E : '(' L ')'
  | 'a'
  ;

L : L ',' E
  | E
  ;

%%

yylex(void) {
  /* very simple yylex as every token is a single character */
  return getchar();
}

                   --------------------------------------

How does Yacc react to the following input strings:

       1. a
       2. (a)
       3. ((a),a,(a,a))
       4. (a  )
       5. (a(a,a))

---------------------------------------------------------------------------

                    HARDER YACC EXAMPLE FOR A CALCULATOR

Grammar:

     E -> E + T | T
     T -> T * F | F
     F -> ( E ) | digit

YACC specification (Similar to Fig 5.10 Louden):

                   --------------------------------------

%{

#include <stdio.h>
#include <ctype.h>
%}
%token DIGIT

%%

line   : expr '\n'       {printf("%d\n", $1);}
       ;

expr   : expr '+' term   { $$ = $1 + $3; }
       | term
       ;

term   : term '*' factor { $$ = $1 * $3; }
       | factor
       ;

factor : '(' expr ')'    { $$ = $2; }
       | DIGIT
       ;

%%

yylex() {
    int c;
    c = getchar();
    if( isdigit( c ) ) {
        yylval = c - '0';
        return DIGIT;
    }
    return c;
}

---------------------------------------------------------------------------

                          SCANNING FOR NEXT TOKEN

Yacc expects the next token to be returned by the function yylex( )

   * Lex itself can be used to generate yylex()
   * Each token is defined as an inetger value
   * single character tokens can use themselves (their ASCII value) as the
     token value

%token  ATOK      declaration:

   * Used to define multiple-character tokens
   * Yacc assigns the token an integer value that does not conflict with
     other token values (starting at 257 on our system)
   * The function yylex( ) should return ATOK when that token is matched
   * If the token has a value, Yacc expects the value to be placed in the
     global variable yylval
        o the value is assigned within the function yylex( )
        o see Louden Fig 5.10 for an example of a manual yylex( ) assigning
          the value to yylval
        o in lex programs the assignment is performed in the actions part
          when the token is matched

%start   symbol

   * explicitly declares the starting symbol to Yacc
   * if not included the symbol used is the left-hand side of the first
     grammar rule in the rules section

---------------------------------------------------------------------------

                            NOTES ON THE EXAMPLE

   * The rules section (before the first %%) defines tokens, in this case
     the token DIGIT.
   * Single character quoted tokens, such as '+' are automatically
     allowable as tokens without specifying them here.
   * Every symbol has a value, which is of a type appropriate to the type
     of the symbol (eg. for a number, the value would be the number
     itself.) Yacc obtains this from yylval.
   * In this parser, the type the type of the value of a NUMBER will be an
     int, and the symbol of a NAME will be a pointer to a symbol table.
   * Default action is:
            $$ = $1

Theoretical note - observe that Yacc handles left recursion in the grammar:
in fact it works best if left recursion is present!
